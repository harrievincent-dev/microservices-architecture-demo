yaml
version: '3.8'

services:
  # Infrastructure Services
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka-server

  # Databases
  postgres:
    image: postgres:13
    container_name: user-postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:5.0
    container_name: product-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: productdb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  mysql:
    image: mysql:8.0
    container_name: order-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: orderdb
      MYSQL_USER: order
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  redis:
    image: redis:6-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Core Services
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - EUREKA_SERVER=http://eureka-server:8761/eureka
      - CONFIG_SERVER=http://config-server:8888
    depends_on:
      - postgres
      - eureka-server
      - config-server

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGO_HOST=mongodb
      - EUREKA_SERVER=http://eureka-server:8761/eureka
      - CONFIG_SERVER=http://config-server:8888
    depends_on:
      - mongodb
      - eureka-server
      - config-server

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - EUREKA_SERVER=http://eureka-server:8761/eureka
      - CONFIG_SERVER=http://config-server:8888
      - KAFKA_SERVERS=kafka:9092
    depends_on:
      - mysql
      - eureka-server
      - config-server
      - kafka

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=redis
      - EUREKA_SERVER=http://eureka-server:8761/eureka
      - CONFIG_SERVER=http://config-server:8888
      - KAFKA_SERVERS=kafka:9092
    depends_on:
      - redis
      - eureka-server
      - config-server
      - kafka

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER=http://eureka-server:8761/eureka
      - CONFIG_SERVER=http://config-server:8888
    depends_on:
      - eureka-server
      - config-server
      - user-service
      - product-service
      - order-service

  # Monitoring
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Frontend
  frontend:
    build: ./frontend
    container_name: microservices-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  mongodb_data:
  mysql_data:
  redis_data:
  grafana_data:
